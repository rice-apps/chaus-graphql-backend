# source: https://us1.prisma.sh/will-mundy-9280b5/chaus-gql/dev
# timestamp: Tue Jul 24 2018 11:47:03 GMT-0400 (EDT)

type AggregateDay {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateShift {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserAvailability {
  count: Int!
}

type AggregateUserSchedule {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Day implements Node {
  id: ID!
  dayName: WEEKDAY!
  shifts(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shift!]
}

"""A connection to a list of items."""
type DayConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DayEdge]!
  aggregate: AggregateDay!
}

input DayCreateInput {
  dayName: WEEKDAY!
  shifts: ShiftCreateManyInput
}

input DayCreateManyInput {
  create: [DayCreateInput!]
  connect: [DayWhereUniqueInput!]
}

input DayCreateOneInput {
  create: DayCreateInput
  connect: DayWhereUniqueInput
}

"""An edge in a connection."""
type DayEdge {
  """The item at the end of the edge."""
  node: Day!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DayOrderByInput {
  id_ASC
  id_DESC
  dayName_ASC
  dayName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DayPreviousValues {
  id: ID!
  dayName: WEEKDAY!
}

type DaySubscriptionPayload {
  mutation: MutationType!
  node: Day
  updatedFields: [String!]
  previousValues: DayPreviousValues
}

input DaySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DaySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DaySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DaySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DayWhereInput
}

input DayUpdateDataInput {
  dayName: WEEKDAY
  shifts: ShiftUpdateManyInput
}

input DayUpdateInput {
  dayName: WEEKDAY
  shifts: ShiftUpdateManyInput
}

input DayUpdateManyInput {
  create: [DayCreateInput!]
  connect: [DayWhereUniqueInput!]
  disconnect: [DayWhereUniqueInput!]
  delete: [DayWhereUniqueInput!]
  update: [DayUpdateWithWhereUniqueNestedInput!]
  upsert: [DayUpsertWithWhereUniqueNestedInput!]
}

input DayUpdateOneInput {
  create: DayCreateInput
  connect: DayWhereUniqueInput
  delete: Boolean
  update: DayUpdateDataInput
  upsert: DayUpsertNestedInput
}

input DayUpdateWithWhereUniqueNestedInput {
  where: DayWhereUniqueInput!
  data: DayUpdateDataInput!
}

input DayUpsertNestedInput {
  update: DayUpdateDataInput!
  create: DayCreateInput!
}

input DayUpsertWithWhereUniqueNestedInput {
  where: DayWhereUniqueInput!
  update: DayUpdateDataInput!
  create: DayCreateInput!
}

input DayWhereInput {
  """Logical AND on all given filters."""
  AND: [DayWhereInput!]

  """Logical OR on all given filters."""
  OR: [DayWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DayWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dayName: WEEKDAY

  """All values that are not equal to given value."""
  dayName_not: WEEKDAY

  """All values that are contained in given list."""
  dayName_in: [WEEKDAY!]

  """All values that are not contained in given list."""
  dayName_not_in: [WEEKDAY!]
  shifts_every: ShiftWhereInput
  shifts_some: ShiftWhereInput
  shifts_none: ShiftWhereInput
  _MagicalBackRelation_DaysOfSchedule_every: ScheduleWhereInput
  _MagicalBackRelation_DaysOfSchedule_some: ScheduleWhereInput
  _MagicalBackRelation_DaysOfSchedule_none: ScheduleWhereInput
  _MagicalBackRelation_DayofShift_every: ShiftWhereInput
  _MagicalBackRelation_DayofShift_some: ShiftWhereInput
  _MagicalBackRelation_DayofShift_none: ShiftWhereInput
}

input DayWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSchedule(data: ScheduleCreateInput!): Schedule!
  createUserAvailability(data: UserAvailabilityCreateInput!): UserAvailability!
  createShift(data: ShiftCreateInput!): Shift!
  createUser(data: UserCreateInput!): User!
  createUserSchedule(data: UserScheduleCreateInput!): UserSchedule!
  createDay(data: DayCreateInput!): Day!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateUserAvailability(data: UserAvailabilityUpdateInput!, where: UserAvailabilityWhereUniqueInput!): UserAvailability
  updateShift(data: ShiftUpdateInput!, where: ShiftWhereUniqueInput!): Shift
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserSchedule(data: UserScheduleUpdateInput!, where: UserScheduleWhereUniqueInput!): UserSchedule
  updateDay(data: DayUpdateInput!, where: DayWhereUniqueInput!): Day
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteUserAvailability(where: UserAvailabilityWhereUniqueInput!): UserAvailability
  deleteShift(where: ShiftWhereUniqueInput!): Shift
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserSchedule(where: UserScheduleWhereUniqueInput!): UserSchedule
  deleteDay(where: DayWhereUniqueInput!): Day
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  upsertUserAvailability(where: UserAvailabilityWhereUniqueInput!, create: UserAvailabilityCreateInput!, update: UserAvailabilityUpdateInput!): UserAvailability!
  upsertShift(where: ShiftWhereUniqueInput!, create: ShiftCreateInput!, update: ShiftUpdateInput!): Shift!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertUserSchedule(where: UserScheduleWhereUniqueInput!, create: UserScheduleCreateInput!, update: UserScheduleUpdateInput!): UserSchedule!
  upsertDay(where: DayWhereUniqueInput!, create: DayCreateInput!, update: DayUpdateInput!): Day!
  updateManySchedules(data: ScheduleUpdateInput!, where: ScheduleWhereInput): BatchPayload!
  updateManyUserAvailabilities(data: UserAvailabilityUpdateInput!, where: UserAvailabilityWhereInput): BatchPayload!
  updateManyShifts(data: ShiftUpdateInput!, where: ShiftWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyUserSchedules(data: UserScheduleUpdateInput!, where: UserScheduleWhereInput): BatchPayload!
  updateManyDays(data: DayUpdateInput!, where: DayWhereInput): BatchPayload!
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
  deleteManyUserAvailabilities(where: UserAvailabilityWhereInput): BatchPayload!
  deleteManyShifts(where: ShiftWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyUserSchedules(where: UserScheduleWhereInput): BatchPayload!
  deleteManyDays(where: DayWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  userAvailabilities(where: UserAvailabilityWhereInput, orderBy: UserAvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAvailability]!
  shifts(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shift]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  userSchedules(where: UserScheduleWhereInput, orderBy: UserScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSchedule]!
  days(where: DayWhereInput, orderBy: DayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Day]!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  userAvailability(where: UserAvailabilityWhereUniqueInput!): UserAvailability
  shift(where: ShiftWhereUniqueInput!): Shift
  user(where: UserWhereUniqueInput!): User
  userSchedule(where: UserScheduleWhereUniqueInput!): UserSchedule
  day(where: DayWhereUniqueInput!): Day
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  userAvailabilitiesConnection(where: UserAvailabilityWhereInput, orderBy: UserAvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAvailabilityConnection!
  shiftsConnection(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShiftConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userSchedulesConnection(where: UserScheduleWhereInput, orderBy: UserScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserScheduleConnection!
  daysConnection(where: DayWhereInput, orderBy: DayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum ROLE {
  Employee
  Admin
}

type Schedule implements Node {
  id: ID!
  userSchedules(where: UserScheduleWhereInput, orderBy: UserScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSchedule!]
  weekNo: Int!
  week(where: DayWhereInput, orderBy: DayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Day!]
}

"""A connection to a list of items."""
type ScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  weekNo: Int!
  userSchedules: UserScheduleCreateManyInput
  week: DayCreateManyInput
}

"""An edge in a connection."""
type ScheduleEdge {
  """The item at the end of the edge."""
  node: Schedule!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  weekNo_ASC
  weekNo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SchedulePreviousValues {
  id: ID!
  weekNo: Int!
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
}

input ScheduleUpdateInput {
  weekNo: Int
  userSchedules: UserScheduleUpdateManyInput
  week: DayUpdateManyInput
}

input ScheduleWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  weekNo: Int

  """All values that are not equal to given value."""
  weekNo_not: Int

  """All values that are contained in given list."""
  weekNo_in: [Int!]

  """All values that are not contained in given list."""
  weekNo_not_in: [Int!]

  """All values less than the given value."""
  weekNo_lt: Int

  """All values less than or equal the given value."""
  weekNo_lte: Int

  """All values greater than the given value."""
  weekNo_gt: Int

  """All values greater than or equal the given value."""
  weekNo_gte: Int
  userSchedules_every: UserScheduleWhereInput
  userSchedules_some: UserScheduleWhereInput
  userSchedules_none: UserScheduleWhereInput
  week_every: DayWhereInput
  week_some: DayWhereInput
  week_none: DayWhereInput
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Shift implements Node {
  id: ID!
  startTime: Int!
  endTime: Int!
  closed: Boolean!
  day(where: DayWhereInput): Day!
  availabilities(where: UserAvailabilityWhereInput, orderBy: UserAvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAvailability!]
  scheduled(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type ShiftConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShiftEdge]!
  aggregate: AggregateShift!
}

input ShiftCreateInput {
  startTime: Int!
  endTime: Int!
  closed: Boolean!
  day: DayCreateOneInput!
  availabilities: UserAvailabilityCreateManyWithoutShiftInput
  scheduled: UserCreateManyWithoutScheduledInput
}

input ShiftCreateManyInput {
  create: [ShiftCreateInput!]
  connect: [ShiftWhereUniqueInput!]
}

input ShiftCreateManyWithoutScheduledInput {
  create: [ShiftCreateWithoutScheduledInput!]
  connect: [ShiftWhereUniqueInput!]
}

input ShiftCreateOneWithoutAvailabilitiesInput {
  create: ShiftCreateWithoutAvailabilitiesInput
  connect: ShiftWhereUniqueInput
}

input ShiftCreateWithoutAvailabilitiesInput {
  startTime: Int!
  endTime: Int!
  closed: Boolean!
  day: DayCreateOneInput!
  scheduled: UserCreateManyWithoutScheduledInput
}

input ShiftCreateWithoutScheduledInput {
  startTime: Int!
  endTime: Int!
  closed: Boolean!
  day: DayCreateOneInput!
  availabilities: UserAvailabilityCreateManyWithoutShiftInput
}

"""An edge in a connection."""
type ShiftEdge {
  """The item at the end of the edge."""
  node: Shift!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShiftOrderByInput {
  id_ASC
  id_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  closed_ASC
  closed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ShiftPreviousValues {
  id: ID!
  startTime: Int!
  endTime: Int!
  closed: Boolean!
}

type ShiftSubscriptionPayload {
  mutation: MutationType!
  node: Shift
  updatedFields: [String!]
  previousValues: ShiftPreviousValues
}

input ShiftSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShiftSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShiftSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShiftSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShiftWhereInput
}

input ShiftUpdateDataInput {
  startTime: Int
  endTime: Int
  closed: Boolean
  day: DayUpdateOneInput
  availabilities: UserAvailabilityUpdateManyWithoutShiftInput
  scheduled: UserUpdateManyWithoutScheduledInput
}

input ShiftUpdateInput {
  startTime: Int
  endTime: Int
  closed: Boolean
  day: DayUpdateOneInput
  availabilities: UserAvailabilityUpdateManyWithoutShiftInput
  scheduled: UserUpdateManyWithoutScheduledInput
}

input ShiftUpdateManyInput {
  create: [ShiftCreateInput!]
  connect: [ShiftWhereUniqueInput!]
  disconnect: [ShiftWhereUniqueInput!]
  delete: [ShiftWhereUniqueInput!]
  update: [ShiftUpdateWithWhereUniqueNestedInput!]
  upsert: [ShiftUpsertWithWhereUniqueNestedInput!]
}

input ShiftUpdateManyWithoutScheduledInput {
  create: [ShiftCreateWithoutScheduledInput!]
  connect: [ShiftWhereUniqueInput!]
  disconnect: [ShiftWhereUniqueInput!]
  delete: [ShiftWhereUniqueInput!]
  update: [ShiftUpdateWithWhereUniqueWithoutScheduledInput!]
  upsert: [ShiftUpsertWithWhereUniqueWithoutScheduledInput!]
}

input ShiftUpdateOneWithoutAvailabilitiesInput {
  create: ShiftCreateWithoutAvailabilitiesInput
  connect: ShiftWhereUniqueInput
  delete: Boolean
  update: ShiftUpdateWithoutAvailabilitiesDataInput
  upsert: ShiftUpsertWithoutAvailabilitiesInput
}

input ShiftUpdateWithoutAvailabilitiesDataInput {
  startTime: Int
  endTime: Int
  closed: Boolean
  day: DayUpdateOneInput
  scheduled: UserUpdateManyWithoutScheduledInput
}

input ShiftUpdateWithoutScheduledDataInput {
  startTime: Int
  endTime: Int
  closed: Boolean
  day: DayUpdateOneInput
  availabilities: UserAvailabilityUpdateManyWithoutShiftInput
}

input ShiftUpdateWithWhereUniqueNestedInput {
  where: ShiftWhereUniqueInput!
  data: ShiftUpdateDataInput!
}

input ShiftUpdateWithWhereUniqueWithoutScheduledInput {
  where: ShiftWhereUniqueInput!
  data: ShiftUpdateWithoutScheduledDataInput!
}

input ShiftUpsertWithoutAvailabilitiesInput {
  update: ShiftUpdateWithoutAvailabilitiesDataInput!
  create: ShiftCreateWithoutAvailabilitiesInput!
}

input ShiftUpsertWithWhereUniqueNestedInput {
  where: ShiftWhereUniqueInput!
  update: ShiftUpdateDataInput!
  create: ShiftCreateInput!
}

input ShiftUpsertWithWhereUniqueWithoutScheduledInput {
  where: ShiftWhereUniqueInput!
  update: ShiftUpdateWithoutScheduledDataInput!
  create: ShiftCreateWithoutScheduledInput!
}

input ShiftWhereInput {
  """Logical AND on all given filters."""
  AND: [ShiftWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShiftWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShiftWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startTime: Int

  """All values that are not equal to given value."""
  startTime_not: Int

  """All values that are contained in given list."""
  startTime_in: [Int!]

  """All values that are not contained in given list."""
  startTime_not_in: [Int!]

  """All values less than the given value."""
  startTime_lt: Int

  """All values less than or equal the given value."""
  startTime_lte: Int

  """All values greater than the given value."""
  startTime_gt: Int

  """All values greater than or equal the given value."""
  startTime_gte: Int
  endTime: Int

  """All values that are not equal to given value."""
  endTime_not: Int

  """All values that are contained in given list."""
  endTime_in: [Int!]

  """All values that are not contained in given list."""
  endTime_not_in: [Int!]

  """All values less than the given value."""
  endTime_lt: Int

  """All values less than or equal the given value."""
  endTime_lte: Int

  """All values greater than the given value."""
  endTime_gt: Int

  """All values greater than or equal the given value."""
  endTime_gte: Int
  closed: Boolean

  """All values that are not equal to given value."""
  closed_not: Boolean
  day: DayWhereInput
  availabilities_every: UserAvailabilityWhereInput
  availabilities_some: UserAvailabilityWhereInput
  availabilities_none: UserAvailabilityWhereInput
  scheduled_every: UserWhereInput
  scheduled_some: UserWhereInput
  scheduled_none: UserWhereInput
  _MagicalBackRelation_ShiftsOfDay_every: DayWhereInput
  _MagicalBackRelation_ShiftsOfDay_some: DayWhereInput
  _MagicalBackRelation_ShiftsOfDay_none: DayWhereInput
  _MagicalBackRelation_UserScheduledShifts_every: UserScheduleWhereInput
  _MagicalBackRelation_UserScheduledShifts_some: UserScheduleWhereInput
  _MagicalBackRelation_UserScheduledShifts_none: UserScheduleWhereInput
}

input ShiftWhereUniqueInput {
  id: ID
}

type Subscription {
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
  userAvailability(where: UserAvailabilitySubscriptionWhereInput): UserAvailabilitySubscriptionPayload
  shift(where: ShiftSubscriptionWhereInput): ShiftSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userSchedule(where: UserScheduleSubscriptionWhereInput): UserScheduleSubscriptionPayload
  day(where: DaySubscriptionWhereInput): DaySubscriptionPayload
}

type User implements Node {
  id: ID!
  netid: String!
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE!
  availabilities(where: UserAvailabilityWhereInput, orderBy: UserAvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAvailability!]
  scheduled(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shift!]
}

type UserAvailability implements Node {
  id: ID!
  shift(where: ShiftWhereInput): Shift!
  user(where: UserWhereInput): User!
  availability: Int
}

"""A connection to a list of items."""
type UserAvailabilityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAvailabilityEdge]!
  aggregate: AggregateUserAvailability!
}

input UserAvailabilityCreateInput {
  availability: Int
  shift: ShiftCreateOneWithoutAvailabilitiesInput!
  user: UserCreateOneWithoutAvailabilitiesInput!
}

input UserAvailabilityCreateManyWithoutShiftInput {
  create: [UserAvailabilityCreateWithoutShiftInput!]
  connect: [UserAvailabilityWhereUniqueInput!]
}

input UserAvailabilityCreateManyWithoutUserInput {
  create: [UserAvailabilityCreateWithoutUserInput!]
  connect: [UserAvailabilityWhereUniqueInput!]
}

input UserAvailabilityCreateWithoutShiftInput {
  availability: Int
  user: UserCreateOneWithoutAvailabilitiesInput!
}

input UserAvailabilityCreateWithoutUserInput {
  availability: Int
  shift: ShiftCreateOneWithoutAvailabilitiesInput!
}

"""An edge in a connection."""
type UserAvailabilityEdge {
  """The item at the end of the edge."""
  node: UserAvailability!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserAvailabilityOrderByInput {
  id_ASC
  id_DESC
  availability_ASC
  availability_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserAvailabilityPreviousValues {
  id: ID!
  availability: Int
}

type UserAvailabilitySubscriptionPayload {
  mutation: MutationType!
  node: UserAvailability
  updatedFields: [String!]
  previousValues: UserAvailabilityPreviousValues
}

input UserAvailabilitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAvailabilitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAvailabilitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAvailabilitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserAvailabilityWhereInput
}

input UserAvailabilityUpdateInput {
  availability: Int
  shift: ShiftUpdateOneWithoutAvailabilitiesInput
  user: UserUpdateOneWithoutAvailabilitiesInput
}

input UserAvailabilityUpdateManyWithoutShiftInput {
  create: [UserAvailabilityCreateWithoutShiftInput!]
  connect: [UserAvailabilityWhereUniqueInput!]
  disconnect: [UserAvailabilityWhereUniqueInput!]
  delete: [UserAvailabilityWhereUniqueInput!]
  update: [UserAvailabilityUpdateWithWhereUniqueWithoutShiftInput!]
  upsert: [UserAvailabilityUpsertWithWhereUniqueWithoutShiftInput!]
}

input UserAvailabilityUpdateManyWithoutUserInput {
  create: [UserAvailabilityCreateWithoutUserInput!]
  connect: [UserAvailabilityWhereUniqueInput!]
  disconnect: [UserAvailabilityWhereUniqueInput!]
  delete: [UserAvailabilityWhereUniqueInput!]
  update: [UserAvailabilityUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserAvailabilityUpsertWithWhereUniqueWithoutUserInput!]
}

input UserAvailabilityUpdateWithoutShiftDataInput {
  availability: Int
  user: UserUpdateOneWithoutAvailabilitiesInput
}

input UserAvailabilityUpdateWithoutUserDataInput {
  availability: Int
  shift: ShiftUpdateOneWithoutAvailabilitiesInput
}

input UserAvailabilityUpdateWithWhereUniqueWithoutShiftInput {
  where: UserAvailabilityWhereUniqueInput!
  data: UserAvailabilityUpdateWithoutShiftDataInput!
}

input UserAvailabilityUpdateWithWhereUniqueWithoutUserInput {
  where: UserAvailabilityWhereUniqueInput!
  data: UserAvailabilityUpdateWithoutUserDataInput!
}

input UserAvailabilityUpsertWithWhereUniqueWithoutShiftInput {
  where: UserAvailabilityWhereUniqueInput!
  update: UserAvailabilityUpdateWithoutShiftDataInput!
  create: UserAvailabilityCreateWithoutShiftInput!
}

input UserAvailabilityUpsertWithWhereUniqueWithoutUserInput {
  where: UserAvailabilityWhereUniqueInput!
  update: UserAvailabilityUpdateWithoutUserDataInput!
  create: UserAvailabilityCreateWithoutUserInput!
}

input UserAvailabilityWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAvailabilityWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAvailabilityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAvailabilityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  availability: Int

  """All values that are not equal to given value."""
  availability_not: Int

  """All values that are contained in given list."""
  availability_in: [Int!]

  """All values that are not contained in given list."""
  availability_not_in: [Int!]

  """All values less than the given value."""
  availability_lt: Int

  """All values less than or equal the given value."""
  availability_lte: Int

  """All values greater than the given value."""
  availability_gt: Int

  """All values greater than or equal the given value."""
  availability_gte: Int
  shift: ShiftWhereInput
  user: UserWhereInput
}

input UserAvailabilityWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  netid: String!
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  availabilities: UserAvailabilityCreateManyWithoutUserInput
  scheduled: ShiftCreateManyWithoutScheduledInput
}

input UserCreateManyWithoutScheduledInput {
  create: [UserCreateWithoutScheduledInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAvailabilitiesInput {
  create: UserCreateWithoutAvailabilitiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAvailabilitiesInput {
  netid: String!
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  scheduled: ShiftCreateManyWithoutScheduledInput
}

input UserCreateWithoutScheduledInput {
  netid: String!
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  availabilities: UserAvailabilityCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  netid_ASC
  netid_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  idealHour_ASC
  idealHour_DESC
  maxHour_ASC
  maxHour_DESC
  totalHours_ASC
  totalHours_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  netid: String!
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE!
}

type UserSchedule implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  scheduledShifts(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shift!]
}

"""A connection to a list of items."""
type UserScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserScheduleEdge]!
  aggregate: AggregateUserSchedule!
}

input UserScheduleCreateInput {
  user: UserCreateOneInput!
  scheduledShifts: ShiftCreateManyInput
}

input UserScheduleCreateManyInput {
  create: [UserScheduleCreateInput!]
  connect: [UserScheduleWhereUniqueInput!]
}

"""An edge in a connection."""
type UserScheduleEdge {
  """The item at the end of the edge."""
  node: UserSchedule!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserScheduleOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserSchedulePreviousValues {
  id: ID!
}

type UserScheduleSubscriptionPayload {
  mutation: MutationType!
  node: UserSchedule
  updatedFields: [String!]
  previousValues: UserSchedulePreviousValues
}

input UserScheduleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScheduleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScheduleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScheduleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserScheduleWhereInput
}

input UserScheduleUpdateDataInput {
  user: UserUpdateOneInput
  scheduledShifts: ShiftUpdateManyInput
}

input UserScheduleUpdateInput {
  user: UserUpdateOneInput
  scheduledShifts: ShiftUpdateManyInput
}

input UserScheduleUpdateManyInput {
  create: [UserScheduleCreateInput!]
  connect: [UserScheduleWhereUniqueInput!]
  disconnect: [UserScheduleWhereUniqueInput!]
  delete: [UserScheduleWhereUniqueInput!]
  update: [UserScheduleUpdateWithWhereUniqueNestedInput!]
  upsert: [UserScheduleUpsertWithWhereUniqueNestedInput!]
}

input UserScheduleUpdateWithWhereUniqueNestedInput {
  where: UserScheduleWhereUniqueInput!
  data: UserScheduleUpdateDataInput!
}

input UserScheduleUpsertWithWhereUniqueNestedInput {
  where: UserScheduleWhereUniqueInput!
  update: UserScheduleUpdateDataInput!
  create: UserScheduleCreateInput!
}

input UserScheduleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScheduleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScheduleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScheduleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
  scheduledShifts_every: ShiftWhereInput
  scheduledShifts_some: ShiftWhereInput
  scheduledShifts_none: ShiftWhereInput
  _MagicalBackRelation_UsersOfSchedule_every: ScheduleWhereInput
  _MagicalBackRelation_UsersOfSchedule_some: ScheduleWhereInput
  _MagicalBackRelation_UsersOfSchedule_none: ScheduleWhereInput
}

input UserScheduleWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  netid: String
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  availabilities: UserAvailabilityUpdateManyWithoutUserInput
  scheduled: ShiftUpdateManyWithoutScheduledInput
}

input UserUpdateInput {
  netid: String
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  availabilities: UserAvailabilityUpdateManyWithoutUserInput
  scheduled: ShiftUpdateManyWithoutScheduledInput
}

input UserUpdateManyWithoutScheduledInput {
  create: [UserCreateWithoutScheduledInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutScheduledInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutScheduledInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutAvailabilitiesInput {
  create: UserCreateWithoutAvailabilitiesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutAvailabilitiesDataInput
  upsert: UserUpsertWithoutAvailabilitiesInput
}

input UserUpdateWithoutAvailabilitiesDataInput {
  netid: String
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  scheduled: ShiftUpdateManyWithoutScheduledInput
}

input UserUpdateWithoutScheduledDataInput {
  netid: String
  firstName: String
  lastName: String
  idealHour: Int
  maxHour: Int
  totalHours: Int
  role: ROLE
  availabilities: UserAvailabilityUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutScheduledInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutScheduledDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAvailabilitiesInput {
  update: UserUpdateWithoutAvailabilitiesDataInput!
  create: UserCreateWithoutAvailabilitiesInput!
}

input UserUpsertWithWhereUniqueWithoutScheduledInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutScheduledDataInput!
  create: UserCreateWithoutScheduledInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  netid: String

  """All values that are not equal to given value."""
  netid_not: String

  """All values that are contained in given list."""
  netid_in: [String!]

  """All values that are not contained in given list."""
  netid_not_in: [String!]

  """All values less than the given value."""
  netid_lt: String

  """All values less than or equal the given value."""
  netid_lte: String

  """All values greater than the given value."""
  netid_gt: String

  """All values greater than or equal the given value."""
  netid_gte: String

  """All values containing the given string."""
  netid_contains: String

  """All values not containing the given string."""
  netid_not_contains: String

  """All values starting with the given string."""
  netid_starts_with: String

  """All values not starting with the given string."""
  netid_not_starts_with: String

  """All values ending with the given string."""
  netid_ends_with: String

  """All values not ending with the given string."""
  netid_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  idealHour: Int

  """All values that are not equal to given value."""
  idealHour_not: Int

  """All values that are contained in given list."""
  idealHour_in: [Int!]

  """All values that are not contained in given list."""
  idealHour_not_in: [Int!]

  """All values less than the given value."""
  idealHour_lt: Int

  """All values less than or equal the given value."""
  idealHour_lte: Int

  """All values greater than the given value."""
  idealHour_gt: Int

  """All values greater than or equal the given value."""
  idealHour_gte: Int
  maxHour: Int

  """All values that are not equal to given value."""
  maxHour_not: Int

  """All values that are contained in given list."""
  maxHour_in: [Int!]

  """All values that are not contained in given list."""
  maxHour_not_in: [Int!]

  """All values less than the given value."""
  maxHour_lt: Int

  """All values less than or equal the given value."""
  maxHour_lte: Int

  """All values greater than the given value."""
  maxHour_gt: Int

  """All values greater than or equal the given value."""
  maxHour_gte: Int
  totalHours: Int

  """All values that are not equal to given value."""
  totalHours_not: Int

  """All values that are contained in given list."""
  totalHours_in: [Int!]

  """All values that are not contained in given list."""
  totalHours_not_in: [Int!]

  """All values less than the given value."""
  totalHours_lt: Int

  """All values less than or equal the given value."""
  totalHours_lte: Int

  """All values greater than the given value."""
  totalHours_gt: Int

  """All values greater than or equal the given value."""
  totalHours_gte: Int
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
  availabilities_every: UserAvailabilityWhereInput
  availabilities_some: UserAvailabilityWhereInput
  availabilities_none: UserAvailabilityWhereInput
  scheduled_every: ShiftWhereInput
  scheduled_some: ShiftWhereInput
  scheduled_none: ShiftWhereInput
  _MagicalBackRelation_UserSchedule_every: UserScheduleWhereInput
  _MagicalBackRelation_UserSchedule_some: UserScheduleWhereInput
  _MagicalBackRelation_UserSchedule_none: UserScheduleWhereInput
}

input UserWhereUniqueInput {
  id: ID
  netid: String
}

enum WEEKDAY {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
